from copy import copy
from error import Error

class DataType():
    def __init__(self, data_type, referee_name=None, reference_type='BYVAL', default=None):
        self.data_type = data_type
        self.referee_name = referee_name
        self.reference_type = reference_type
        self.default = default

class VariableType(DataType):
    def __init__(self, data_type, referee_name=None, reference_type='BYVAL', default=None):
        super().__init__(data_type, referee_name, reference_type, default)

    def declare(self):
        return Variable(self.default)

class Variable():
    def __init__(self, default):
        self.value = default

    def assign(self, value):
        self.value = value[0]

class ConstantType(DataType):
    def __init__(self, data_type='CONSTANT'):
        super().__init__(data_type)

    def declare(self, value=None):
        return Constant(value)

class Constant():
    def __init__(self, value):
        self.value = value

class ArrayType(DataType):
    def __init__(self, dimensions, data_type, referee_name=None, reference_type='BYVAL', default=None):
        super().__init__(data_type, referee_name, reference_type, default)
        self.dimensions = dimensions

    def declare(self):
        layers = len(self.dimensions)
        deep_layer_indexes = {}
        shallow_layer_indexes = {}

        for i in range(layers - 1, -1, -1):
            if i + 1 == layers:
                for j in range(self.dimensions[i][0], self.dimensions[i][1] + 1):
                    deep_layer_indexes[j] = self.default
            else:
                shallow_layer_indexes = copy(deep_layer_indexes)
                deep_layer_indexes = {}

                for j in range(self.dimensions[i][0], self.dimensions[i][1] + 1):
                    deep_layer_indexes[j] = shallow_layer_indexes

        return Array(deep_layer_indexes)

class Array():
    def __init__(self, value):
        self.value = value

    def assign(self, data):
        value = data[0]
        if type(value) is not list:
            indexes = data[1]
            array_indexes = self.value

            for i in range(len(indexes) - 1):
                try:
                    array_indexes = array_indexes.get(indexes[i])
                except:
                    Error().index_error('Index out of bounds')

            array_indexes[indexes[-1]] = value
        else:
            self.value = value

class TypeType(DataType):
    def __init__(self, fields, data_type, referee_name=None, reference_type='BYVAL'):
        self.fields = fields
        default = {}
        for field in fields.keys():
            default[field] = fields[field].declare()

        super().__init__(data_type, referee_name, reference_type, default)

    def declare(self):
        field_values = {}
        for field in self.fields.items():
            field_values[field[0]] = field[1].declare()

        return Type(field_values)

class Type():
    def __init__(self, name, value):
        self.value = value

    def assign(self, data):
        value = data[0]
        field = data[1]

        self.value[field].value = value
